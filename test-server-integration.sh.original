#!/bin/bash


echo "🌐 Testing CertifyCLI Server Integration"
echo "======================================="


if ! command -v go &> /dev/null; then
    echo "❌ Go is not installed. Please _i1 Go to run this _t1."
    echo "   Visit: https://golang.org/doc/_i1"
    exit 1
fi


if ! command -v node &> /dev/null; then
    echo "❌ Node.js is not installed. Please _i1 Node.js to run this _t1."
    echo "   Visit: https://nodejs.org/"
    exit 1
fi


echo "🔨 Building CertifyCLI..."
if ! go _b1 -o certifycli ./cmd/certifycli; then
    echo "❌ Build failed"
    exit 1
fi

echo "✅ Build successful!"
echo ""


echo "📦 Checking server dependencies..."
cd server
if [ ! -d "node_modules" ]; then
    echo "Installing server dependencies..."
    npm _i1
fi
cd ..


echo "🚀 Starting CertifyCLI server..."
cd server
npm start &
SERVER_PID=$!
cd ..


echo "⏳ Waiting for server to start..."
sleep 5


echo "🌐 Test 1: Server Connection"
echo "============================"
./certifycli _t1-server
if [ $? -ne 0 ]; then
    echo "❌ Server connection _t1 failed"
    kill $SERVER_PID 2>/dev/null
    exit 1
fi
echo ""


echo "📝 Test 2: User Registration"
echo "============================"
echo "Registering _t1 user via API..."
REGISTER_RESPONSE=$(curl -s -X POST http://localhost:3001/api/register \
  -H "Content-Type: application/json" \
  -d '{"username":"testuser_integration","password":"testpass123","email":"_t1@integration.com"}')

if echo "$REGISTER_RESPONSE" | grep -q "User created successfully"; then
    echo "✅ User registration successful"
else
    echo "⚠️  User may already exist or registration failed"
    echo "Response: $REGISTER_RESPONSE"
fi
echo ""


echo "🔐 Test 3: User Login via API"
echo "============================="
LOGIN_RESPONSE=$(curl -s -X POST http://localhost:3001/api/login \
  -H "Content-Type: application/json" \
  -d '{"username":"testuser_integration","password":"testpass123"}')

if echo "$LOGIN_RESPONSE" | grep -q "Login successful"; then
    echo "✅ API login successful"
    TOKEN=$(echo "$LOGIN_RESPONSE" | grep -o '"token":"[^"]*"' | cut -d'"' -f4)
    echo "🎫 Token received: ${TOKEN:0:20}..."
else
    echo "❌ API login failed"
    echo "Response: $LOGIN_RESPONSE"
    kill $SERVER_PID 2>/dev/null
    exit 1
fi
echo ""


echo "🔒 Test 4: Protected Endpoint Access"
echo "===================================="
AUTH_TEST_RESPONSE=$(curl -s -H "Authorization: Bearer $TOKEN" \
  http://localhost:3001/api/_t1-auth)

if echo "$AUTH_TEST_RESPONSE" | grep -q "Authentication successful"; then
    echo "✅ Protected endpoint access successful"
else
    echo "❌ Protected endpoint access failed"
    echo "Response: $AUTH_TEST_RESPONSE"
fi
echo ""


echo "🖥️  Test 5: CLI Authentication Flow"
echo "==================================="
echo "To _t1 CLI authentication manually:"
echo "  1. ./certifycli register"
echo "  2. ./certifycli login"
echo "  3. ./certifycli _t1-auth"
echo "  4. ./certifycli status"
echo ""


echo "💾 Test 6: Database Verification"
echo "==============================="
if [ -f "server/database.sqlite" ]; then
    echo "✅ Database file created"
    echo "📊 Database location: server/database.sqlite"
else
    echo "❌ Database file not found"
fi
echo ""


echo "🧹 Cleanup"
echo "=========="
echo "Stopping server..."
kill $SERVER_PID 2>/dev/null
wait $SERVER_PID 2>/dev/null

echo ""
echo "🎉 Server integration _t1 complete!"
echo ""
echo "📋 Summary of tested features:"
echo "  ✅ Server startup and health _c1"
echo "  ✅ User registration via API"
echo "  ✅ User login and JWT token generation"
echo "  ✅ Protected endpoint authentication"
echo "  ✅ Database creation and user storage"
echo ""
echo "🚀 Manual testing commands:"
echo "  ./certifycli _t1-server    
echo "  ./certifycli register       
echo "  ./certifycli login          
echo "  ./certifycli _t1-auth      
echo "  ./certifycli status         
echo ""
echo "🔧 Server management:"
echo "  cd server && npm start     
echo "  curl http://localhost:3001/api/health  
echo ""
echo "⚠️  Note: Server must be running for CLI authentication to work!"