name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test-go:
    name: Test Go CLI
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Download dependencies
      run: go mod download
    
    - name: Run tests
      run: go test -v ./...
    
    - name: Build CLI
      run: go build -v ./cmd/certifycli
    
    - name: Test CLI help
      run: ./certifycli --help

  test-server:
    name: Test Node.js Server
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: server/package-lock.json
    
    - name: Install dependencies
      run: |
        cd server
        npm ci
    
    - name: Run server tests
      run: |
        cd server
        npm test
    
    - name: Start server and test health
      run: |
        cd server
        npm start &
        sleep 5
        curl -f http://localhost:3001/api/health || exit 1
        pkill -f "node index.js"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  build-release:
    name: Build Release Binaries
    runs-on: ubuntu-latest
    needs: [test-go, test-server]
    if: github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
    
    - name: Build binary
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        mkdir -p dist
        if [ "$GOOS" = "windows" ]; then
          go build -o dist/certifycli-${{ matrix.goos }}-${{ matrix.goarch }}.exe ./cmd/certifycli
        else
          go build -o dist/certifycli-${{ matrix.goos }}-${{ matrix.goarch }} ./cmd/certifycli
        fi
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: certifycli-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/

  docker-build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-go, test-server]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build CLI Docker image
      run: |
        docker build -t certifycli:latest .
    
    - name: Build Server Docker image
      run: |
        docker build -t certifycli-server:latest ./server